// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  username          String              @unique
  password          String
  Profile           Profile[]
  users             Friend[]            @relation(name: "users")
  friends           Friend[]            @relation(name: "friends")
  ChatMessages      ChatMessage[]
  ChatMember        ChatMember[]
  ChatPendingMember ChatPendingMember[]
  ChatNotify        ChatNotify[]
}

model Profile {
  name         String
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @id @map("user_id")
  profileImage String @default("https://www.svgrepo.com/show/442075/avatar-default-symbolic.svg") @map("profile_image")
}

model Friend {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id], name: "users")
  userId    Int          @map("user_id")
  friend    User         @relation(fields: [friendId], references: [id], name: "friends")
  friendId  Int          @map("friend_id")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  status    FriendStatus
}

enum FriendStatus {
  PENDING
  FRIEND
  REQUESTED

  @@map("friend_status")
}

model Chat {
  id                Int                 @id @default(autoincrement())
  ChatMessages      ChatMessage[]
  ChatMembers       ChatMember[]
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  name              String              @default("New Chat")
  description       String?
  type              ChatType
  chatImage         String?             @map("chat_image")
  ChatPendingMember ChatPendingMember[]
  chatNotify        ChatNotify[]
}

enum ChatType {
  GROUP
  PRIVATE

  @@map("chat_type")
}

model ChatMessage {
  id          Int             @id @default(autoincrement())
  chat        Chat            @relation(fields: [chatId], references: [id])
  chatId      Int             @map("chat_id")
  user        User            @relation(fields: [userId], references: [id])
  userId      Int             @map("user_id")
  message     String
  messageType ChatMessageType @map("message_type")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@map("chat_message")
}

enum ChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE

  @@map("chat_message_type")
}

model ChatMember {
  id       Int      @id @default(autoincrement())
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   Int      @map("chat_id")
  user     User     @relation(fields: [userId], references: [id])
  userId   Int      @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  @@map("chat_member")
}

model ChatPendingMember {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int      @map("chat_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  invitedAt DateTime @default(now()) @map("invited_at")

  @@map("chat_pending_member")
}

model ChatNotify {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int      @map("chat_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  value     Boolean  @default(false)
  messageId Int    @map("message_id")
  chatType  ChatType @map("chat_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("chat_notify")
}